#define _USE_MATH_DEFINES
#include <bits/stdc++.h>

using namespace std;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

void fileIO(void) {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
#ifdef ONLINE_JUDGE
    //    freopen("walls.in", "r", stdin);
#endif
}

void fastIO(void) {
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
}

#define endl '\n'
typedef long long ll;
#define int ll
typedef long double ld;

#define all(a)   a.begin(),a.end()
#define all_r(a)   a.rbegin(),a.rend()
#define flsh cout.flush()

#define N (ll)(2e5 + 5)
#define MOD (ll)(1e9 + 7)
const long long oo = 1e18;
const ld EPS = 1e-8;
const int mod = 1e9 + 7;

int n, m, k;
vector<vector<char>> grid;
vector<vector<int>> cost(26, vector<int>(26)); //cost[i][j] minimum cost to put j after i

bool valid(int i, int j){
    return i >= 0 && j >= 0 && i < n && j < m;
}

int dx[4] = { 1, 0, -1, 0 },
        dy[4] = { 0, 1, 0, -1 };

vector<vector<int>> dist;

vector<int> bfs(int c){
    queue<pair<int, int>> q;

    vector<int> curCost(26,oo);
    curCost[c] = 0;

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if(grid[i][j] == (char)(c + 'a')){
                q.push({i, j});
                dist[i][j] = 0;
            }
            else{
                dist[i][j] = oo;
            };
        }
    }

    while (q.size()){
        auto [i, j] = q.front();
        q.pop();
        for (int l = 0; l < 4; ++l) {
            int nx = i + dx[l], ny = j + dy[l];
            if(valid(nx, ny) && dist[nx][ny] == oo){
                dist[nx][ny] = dist[i][j] + 1;
                curCost[grid[nx][ny]- 'a'] = min(curCost[grid[nx][ny] - 'a'], dist[nx][ny]);
                q.push({nx, ny});
            }
        }
    }

    return curCost;
}

void solve(){
    cin >> n >> m >> k;
    grid.assign(n, vector<char>(m));
    dist.assign(n, vector<int>(m, oo));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cin >> grid[i][j];
        }
    }

    for (int i = 0; i < 26; ++i) {
        cost[i] = bfs(i);
    }

    string p; cin >> p;
    int ans = 0;
    for (int i = 1; i < p.size(); ++i) {
        ans += cost[p[i - 1] - 'a'][p[i] - 'a'];
    }
    cout << ans << endl;
}

signed main() {
    fastIO(); fileIO();
    cout << fixed << setprecision(9);
    int test = 1, t = 1; cin>>test;
    while (test--) {
//        cout << "Case #" << t << ": ";
        solve();
        t++;
    }
}